datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())

  email    String  @unique @map("email_index")
  password String

  phone  String? @unique
  avatar String?

  firstName String?
  lastName  String?
  birthday  DateTime?
  roles     UserRole[] @default([USER])

  OTP                   String?
  emailUnsubscribeToken String? @unique @default(cuid())
  referralCode          String  @unique @default(nanoid())

  referredFrom   User?   @relation("ReferredUsers", fields: [referredFromId], references: [id])
  referredFromId String?

  referredUsers User[] @relation("ReferredUsers")

  isBanned          Boolean @default(false)
  isEmailVerified   Boolean @default(false)
  isPhoneVerified   Boolean @default(false)
  isEmailSubscribed Boolean @default(false)
  isPhoneSubscribed Boolean @default(false)

  // Profiles
  artist    Artist?
  gallery   Gallery?
  collector Collector?

  payments      Payment[]
  notifications Notification[]
  errors        Error[]
  files         File[]
  sessions      Session[]

  tickets         Ticket[]
  ticketMessages  TicketMessage[]
  assignedTickets Ticket[] @relation("AssignedTickets")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  ARTIST
  GALLERY
  COLLECTOR
  USER
}

model Purchase {
  id          String  @id @default(cuid())
  isDelivered Boolean @default(false)

  galleryAgreement   GalleryArtistAgreement? @relation(fields: [galleryAgreementId], references: [id])
  galleryAgreementId String?

  artFairAgreement   ArtFairGalleryArtistAgreement? @relation(fields: [artFairAgreementId], references: [id])
  artFairAgreementId String?

  collector   Collector @relation(fields: [collectorId], references: [id], onDelete: Cascade)
  collectorId String

  payment Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id     String @id @default(cuid())
  status PaymentStatusEnum
  type   PaymentType

  refId            String  @unique @map("ref_id_index")
  paymentIntentId  String
  stripeCustomerId String

  amount Float

  purchase   Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId String?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentType {
  DEPOSIT
  WITHDRAW
  PURCHASE
}

enum PaymentStatusEnum {
  PROCESSING
  SUCCESS
  FAILED
  DENIED
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Artist {
  id String @id @default(cuid())

  name    String
  bio     String?
  website String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  artworks Artwork[]

  galleryArtistAgreements        GalleryArtistAgreement[]
  artFairGalleryArtistAgreements ArtFairGalleryArtistAgreement[]

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id         String  @id @default(cuid())
  isVerified Boolean @default(false)

  name     String
  bio      String?
  website  String?
  location String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  galleryArtistAgreements  GalleryArtistAgreement[]
  artFairGalleryAgreements ArtFairGalleryAgreement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GalleryArtistAgreement {
  id String @id @default(cuid())

  gallery   Gallery @relation(fields: [galleryId], references: [id])
  galleryId String
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String
  artwork   Artwork @relation(fields: [artworkId], references: [id])
  artworkId String

  galleryCommission Float

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collector {
  id String @id @default(cuid())

  bio     String?
  website String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  purchases Purchase[]

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtFair {
  id String @id @default(cuid())

  name        String   @unique
  description String
  website     String?
  location    String
  startDate   DateTime
  endDate     DateTime

  artFairGalleryAgreements ArtFairGalleryAgreement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtFairGalleryAgreement {
  id String @id @default(cuid())

  artFair   ArtFair @relation(fields: [artFairId], references: [id])
  artFairId String
  gallery   Gallery @relation(fields: [galleryId], references: [id])
  galleryId String

  artFairCommission Float

  artFairGalleryArtistAgreements ArtFairGalleryArtistAgreement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtFairGalleryArtistAgreement {
  id String @id @default(cuid())

  artFairGalleryAgreement   ArtFairGalleryAgreement @relation(fields: [artFairGalleryAgreementId], references: [id])
  artFairGalleryAgreementId String

  artwork   Artwork @relation(fields: [artworkId], references: [id])
  artworkId String
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String

  galleryCommission Float

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artwork {
  id String @id @default(cuid())

  title       String
  description String
  tags        String[]
  type        ArtworkType[]
  location    String?
  weight      Float?
  height      Float?
  width       Float?
  depth       Float?

  // Relationships
  artists   Artist[]
  shippings Shipping[]

  galleryArtistAgreements        GalleryArtistAgreement[]
  artFairGalleryArtistAgreements ArtFairGalleryArtistAgreement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArtworkType {
  DIGITAL
  PHYSICAL
}

model Shipping {
  id String @id @default(cuid())

  address String
  city    String
  state   String
  zip     String
  country String

  artwork   Artwork @relation(fields: [artworkId], references: [id])
  artworkId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(cuid())

  title   String
  content String
  isRead  Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Ticket {
  id          String  @id @default(cuid())
  title       String
  description String?

  status TicketStatus @default(OPEN)

  messages TicketMessage[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assignedToId])
}

model TicketMessage {
  id      String @id @default(cuid())
  message String

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
  @@index([authorId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Error {
  id String @id @default(cuid())

  error      String
  errorCode  String?
  stackTrace String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())

  @@index([userId])
}

model File {
  id String @id @default(cuid())

  bucket       String?
  fileName     String?
  originalName String?
  size         Float?
  url          String?
  mimeType     String?
  fileType     FileType?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@index([userId])
}

enum FileType {
  IMAGE
  PDF
  DOCUMENT
  OTHER
}